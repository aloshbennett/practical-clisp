(defun make-counter ()
  (let ((counter 0))
    #'(lambda () (setf counter (+ counter 1)))))

(defvar *g1* 0)

(defun test ()
  (let ((x 0))
    (print x)
    (setf x (+ x 1))
    (print x)
    (let ((x 10))
      (print x)
      (setf x (+ x 1))
      (print x))
    (print x)))


(defun test1 ()
  (print *g1*)
  (setf *g1* (+ *g1* 1))
  (let ((*g1* 10))
    (print *g1*)
    (setf *g1* (+ *g1* 1))
    (print *g1*)
    (let ((*g1* 20))
      (print *g1*)
      (setf *g1* (+ *g1* 1))
      (print *g1*))
    (print *g1*))
  (print *g1*))

(defvar *g2* 0)

(defun make-gcounter ()
  (let ((*g2* 10))
    #'(lambda () (setf *g2* (+ *g2* 1))
	      (print *g2*))))

(defun test2 ()
  (let ((fn1 (make-gcounter)) (fn2 (make-gcounter)))
    (funcall fn1)
    (funcall fn2)
    (let ((*g2* 20))
      (let ((fn3 (make-gcounter)) (fn4 (make-gcounter)))
	(funcall fn3)
	(funcall fn4)))
    (funcall fn1)
    (funcall fn2)))
  
(defmacro incr (x &optional (d 1))
  `(setf x (+ x ,d)))
